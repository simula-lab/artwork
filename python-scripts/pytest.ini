[pytest]
# Searching
python_files = test_*
python_classes = Tests*
python_functions = test_*

env_files =
  .env

# do not search for tests in these folders
norecursedirs = venv tests/ignored 

# Add folder to PYTHONPATH
# https://pypi.org/project/pytest-pythonpath/
# python_paths = nest
pythonpath = nest


# set env variables
# https://tech.serhatteker.com/post/2020-02/test-env-vars-in-python/
# https://github.com/pytest-dev/pytest-env


addopts =
    # verbose
    -v
    # more verbosity
    # -vv
    # Don't show warnings
    # -p no:warnings
    # generates coverage report
    # note that enabling pytest coverage will cause debugging pytest to fail on pycharm
    # add the --no-cov to the pytest configuration on pycharm to allow for debugging pytest
    --cov=./nest
    # surpress generating converage if one or more tests failed
    # --no-cov-on-fail
    # do not run migrations => faster test initialization
    # --nomigrations
    # Show hypthesis statistics whereever hypothesis was used
    --hypothesis-show-statistics

# Define additional pytest markers so that using them in test will not trigger warnings
# To show the help line use: % pytest --marker
# To run pytest on a specifc marker use: pytest -m mark
# to run pytestt on several markers use quotation and logic operators as in:
# pytest -m "mark1 and mark2"
# pytest -m "mark1 or mark2"
# pytest -m "mark1 and not mark2"
markers =
    API: tests of server api functions whether it is exposed as REST API or otherwise
    BLACK_BOX: Black Box tests
    WHITE_BOX: White Box tests
    ENVIRONMENT: tests for the environment
    CONFIGURATION: tests for server configurations
    LOGGING: tests related to logging
    UNIT: Unit tests
    INTEGRATION: Integration testsing
    UTILS: tests for utilities
    FUNC: functional teesting
    REGRESSION: tests for fixed bugs, so that they will not happen again
    FOCUS: tests under the microscope... under the spotlight... in focus

